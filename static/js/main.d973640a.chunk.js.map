{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","selectedMonth","React","createRef","state","months","pastDate","today","Date","getFullYear","getMonth","delayedBy","monthString","date","delayedByMonths","this","getDelayedByMonths","initialMonthDate","lateFee","calculateLateFee","current","value","push","convertToMonthly","setState","month","index","key","format","toFixed","sort","a","b","map","renderMonth","_","reduce","sum","it","className","Container","Row","Col","Form","Label","Control","type","ref","Button","onClick","addMonth","Table","striped","bordered","hover","variant","size","renderMonths","length","getTotalLateFee","getTotalAmount","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sYAqKeA,E,YA7IX,WAAYC,GAAe,IAAD,8BACtB,4CAAMA,KAHVC,cAAkCC,IAAMC,YAIpC,EAAKC,MAAQ,CAACC,OAAQ,IAFA,E,gFAKPC,GACf,IAAIC,EAAQ,IAAIC,KAChB,OAAGF,EAAWC,EACH,EAE+B,GAAtBA,EAAME,cAAqBF,EAAMG,YACR,GAAzBJ,EAASG,cAAqBH,EAASI,c,uCAI9CC,GACb,OAASA,EAAY,GAAb,IAAkD,O,uCAG7CC,GACb,IACMC,EAAO,IAAIL,KADEI,EAAc,OAE7BE,EAAkBC,KAAKC,mBAAmBH,GAC9C,MAAO,CACHI,iBAAkBJ,EAClBC,gBAAiBA,EACjBI,QAASH,KAAKI,iBAAiBL,M,iCAKnC,IAAMb,EAAgBc,KAAKd,cAAcmB,QAAQC,MAC3ChB,EAASU,KAAKX,MAAMC,OAC1BA,EAAOiB,KAAKP,KAAKQ,iBAAiBtB,IAClCc,KAAKS,SAAS,CAACnB,a,kCAGPoB,EAAgBC,GACxB,OACI,wBAAIC,IAAKD,GACL,4BAAKA,EAAQ,GACb,4BAAI,kBAAC,IAAD,CAAQb,KAAMY,EAAMR,iBAAkBW,OAAQ,cAClD,4BAAKH,EAAMX,iBACX,oCACA,4BAAKW,EAAMP,QAAQW,QAAQ,IAC3B,6BAAMJ,EAAMP,QA5Dc,MA4DwBW,QAAQ,O,qCAK1C,IAAD,OAEvB,OADiBd,KAAKX,MAAfC,OAEFyB,MAAK,SAACC,EAAYC,GAAb,OAA4BD,EAAEd,iBAAmBe,EAAEf,oBACxDgB,KAAI,SAACR,EAAgBC,GAAjB,OAAmC,EAAKQ,YAAYT,EAAOC,Q,wCAGrD,IACRrB,EAAUU,KAAKX,MAAfC,OACP,OAAO8B,IAAEC,OAAO/B,GAAQ,SAACgC,EAAKC,GAC1B,OAAOD,EAAMC,EAAGpB,UACjB,K,uCAGW,IACPb,EAAUU,KAAKX,MAAfC,OACP,OAAO8B,IAAEC,OAAO/B,GAAQ,SAACgC,EAAKC,GAC1B,OAAOD,EAAMC,EAAGpB,QAlFc,OAmF/B,K,+BAGG,IAAD,OACL,OACI,yBAAKqB,UAAU,OACX,4BAAQA,UAAU,cACd,2DACA,sDAEJ,8BACI,kBAACC,EAAA,EAAD,KACI,6BACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAAK,qDAA0B,gCAlGvB,GAkGuB,QAEnC,kBAACD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,mIAGR,6BACA,6BACA,6BACA,kBAACD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAKC,MAAN,6CAEJ,kBAACF,EAAA,EAAD,KACI,kBAACC,EAAA,EAAKE,QAAN,CAAcC,KAAM,QAASC,IAAKhC,KAAKd,iBAE3C,kBAACyC,EAAA,EAAD,KACI,kBAACM,EAAA,EAAD,CAAQC,QAAS,WACb,EAAKC,aADT,SAKR,6BACA,6BACA,6BACA,kBAACT,EAAA,EAAD,KACI,kBAACU,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,QAAQ,OAAOC,KAAK,MAC9C,+BACA,4BACI,iCACA,0CACA,iDACA,uCACA,4CACA,8CAGJ,+BACCzC,KAAK0C,eACN,4BACI,4BAAK1C,KAAKX,MAAMC,OAAOqD,OAAvB,iBACA,qCACA,6BACA,6BACA,4BAAK3C,KAAK4C,kBAAkB9B,QAAQ,IACpC,4BAAKd,KAAK6C,iBAAiB/B,QAAQ,QAK/C,kBAACY,EAAA,EAAD,KAAK,gDAAsB1B,KAAK6C,iBAAiB/B,QAAQ,Y,GAxI/DgC,aCTEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d973640a.chunk.js","sourcesContent":["// @flow\nimport React, {Component} from 'react';\nimport './App.css';\nimport {Button, Col, Container, Form, Row, Table} from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Moment from \"react-moment\";\nimport _ from \"lodash\";\n\nexport const ANNUAL_INTEREST_RATE = 21;\nexport const MONTHLY_MAINTENANCE_AMOUNT = 3070;\n\ntype Props = {};\ntype Monthly = {\n    initialMonthDate: Date,\n    delayedByMonths: number,\n    lateFee: number\n}\ntype State = {\n    months: Array<Monthly>\n}\n\nclass App extends Component<Props, State> {\n    selectedMonth: { current: any } = React.createRef<HTMLElement>();\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {months: []};\n    }\n\n    getDelayedByMonths(pastDate: Date) {\n        let today = new Date();\n        if(pastDate > today) {\n            return 0;\n        }\n        const monthsToday = today.getFullYear() * 12 + today.getMonth();\n        const givenMonths = pastDate.getFullYear() * 12 + pastDate.getMonth();\n        return monthsToday - givenMonths;\n    }\n\n    calculateLateFee(delayedBy: number) {\n        return ((delayedBy / 12) * (ANNUAL_INTEREST_RATE / 100) * 3070);\n    }\n\n    convertToMonthly(monthString: string) {\n        const dateString = monthString + \"-01\";\n        const date = new Date(dateString);\n        let delayedByMonths = this.getDelayedByMonths(date);\n        return {\n            initialMonthDate: date,\n            delayedByMonths: delayedByMonths,\n            lateFee: this.calculateLateFee(delayedByMonths),\n        }\n    }\n\n    addMonth() {\n        const selectedMonth = this.selectedMonth.current.value;\n        const months = this.state.months;\n        months.push(this.convertToMonthly(selectedMonth));\n        this.setState({months});\n    }\n\n    renderMonth(month: Monthly, index: number): any {\n        return (\n            <tr key={index}>\n                <td>{index + 1}</td>\n                <td><Moment date={month.initialMonthDate} format={\"MMM-YYYY\"}/></td>\n                <td>{month.delayedByMonths}</td>\n                <td>3070</td>\n                <td>{month.lateFee.toFixed(2)}</td>\n                <td>{(month.lateFee + MONTHLY_MAINTENANCE_AMOUNT).toFixed(2)}</td>\n            </tr>\n        )\n    }\n\n    renderMonths(): Array<any> {\n        const {months} = this.state;\n        return months\n            .sort((a: Monthly, b: Monthly) => a.initialMonthDate - b.initialMonthDate)\n            .map((month: Monthly, index: number) => this.renderMonth(month, index));\n    }\n\n    getTotalLateFee() {\n        const {months} = this.state;\n        return _.reduce(months, (sum, it) => {\n            return sum + it.lateFee;\n        }, 0)\n    }\n\n    getTotalAmount() {\n        const {months} = this.state;\n        return _.reduce(months, (sum, it) => {\n            return sum + it.lateFee + MONTHLY_MAINTENANCE_AMOUNT;\n        }, 0)\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h1>Gloria Coop Housing Society</h1>\n                    <p>Maintenance Calculator</p>\n                </header>\n                <main>\n                    <Container>\n                        <br/>\n                        <Row>\n                            <Col><h3>Annual Interest Rate :<strong>{ANNUAL_INTEREST_RATE}%</strong></h3></Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <pre>Monthly Interest = (Delayed By Months / 12) * (Annual Interest Rate / 100) * Monthly Maintenance</pre>\n                            </Col>\n                        </Row>\n                        <br/>\n                        <hr/>\n                        <br/>\n                        <Row>\n                            <Col>\n                                <Form.Label>Select the month you're paying for </Form.Label>\n                            </Col>\n                            <Col>\n                                <Form.Control type={\"month\"} ref={this.selectedMonth}/>\n                            </Col>\n                            <Col>\n                                <Button onClick={() => {\n                                    this.addMonth()\n                                }}>Add</Button>\n                            </Col>\n                        </Row>\n                        <br/>\n                        <hr/>\n                        <br/>\n                        <Row>\n                            <Table striped bordered hover variant=\"dark\" size=\"sm\">\n                                <thead>\n                                <tr>\n                                    <th>#</th>\n                                    <th>Month-Year</th>\n                                    <th>Delayed By Months</th>\n                                    <th>Monthly</th>\n                                    <th>Late Payment</th>\n                                    <th>Total to pay</th>\n                                </tr>\n                                </thead>\n                                <tbody>\n                                {this.renderMonths()}\n                                <tr>\n                                    <td>{this.state.months.length} Months total</td>\n                                    <td>Total</td>\n                                    <td/>\n                                    <td/>\n                                    <td>{this.getTotalLateFee().toFixed(2)}</td>\n                                    <td>{this.getTotalAmount().toFixed(2)}</td>\n                                </tr>\n                                </tbody>\n                            </Table>\n                        </Row>\n                        <Row><h3>Total Payment :: {this.getTotalAmount().toFixed(2)}</h3></Row>\n                    </Container>\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}